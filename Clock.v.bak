module Clock()




endmodule




/////////////////////////////////分频模块
module fenpin (clk,clk_1HZ,clk_2HZ,clk_100HZ,clk_1KHZ,clk_60s,high);
input clk;
output clk_1HZ,clk_2HZ,clk_100HZ,clk_1KHZ,clk_60s,high;
reg clk_1HZ,clk_2HZ,clk_100HZ,clk_1KHZ,clk_60s,high;
reg[26:0] count1=0,count2=0,count3=0,count4=0;
reg[31:0] count5=0;
always@(*)
begin
	high<=1;
end

always@(posedge clk)
begin 
        count1<=count1+1;

        if(count1<25000000)
                clk_1HZ<=1;
        else if(count1<49999999)
                clk_1HZ<=0;
        if(count1==49999999)
                count1<=0;
            
        count2<=count2+1;
        
        if(count2<12500000)
                clk_2HZ<=1;
        else if(count2<24999999)
                clk_2HZ<=0;  
        if(count2==24999999)
                count2<=0;
            
        count3<=count3+1;

        if(count3<250000)
                clk_100HZ<=1;
        else if(count3<499999)
                clk_100HZ<=0;  
        if(count3==499999)
                count3<=0;
                
        count4<=count4+1;

        if(count4<25000)
                clk_1KHZ<=1;
        else if(count4<49999)
                clk_1KHZ<=0;  
        if(count4==49999)
                count4<=0;
			
		  count5<=count5+1;

        if(count5<1500000000)
                clk_1KHZ<=1;
        else if(count5<2999999999)
                clk_1KHZ<=0;  
        if(count5==2999999999)
                count5<=0;

end
endmodule




/////////////////////时钟计数逻辑
module clock(CLK_60s, reset, select, select_enable, num,minute_d, minute_g, hour_d, hour_g); //second_d, second_g, , change1,change2,change3
input CLK_60s; //12.24change ,change1,change2,change3
input reset,select_enable;
input[2:0] select;
input[3:0] num;
output  reg[3:0]  minute_d, minute_g, hour_d, hour_g; //second_d, second_g,
wire   cout_m; //cout_s,

//设置时间和正常计时器 功能耦合    g是十位  d 是个位  select是选择端 sel enable 是控制端
/*
always @(posedge CLK_60s)  
begin  
  if(!reset) second_d<=0;
  else if(select_enable&&select==3'd0)
  begin
		second_d<=num;
  end
  else if(second_d==9)  
    second_d<=0;  
  else  
    second_d<=second_d+1;  
end  
  
always @(posedge CLK_1Hz)  
begin  
  if(!reset) second_g<=5;
  else if(select_enable&&select==3'd1)
  begin
		second_g<=num;
  end  
  else if(second_d==9)  
    begin  
      if(second_g==5)  
        second_g<=0;  
      else  
        second_g<=second_g+1;  
    end  
  end  
assign cout_s=((second_d==9)&&(second_g==5))?1:0;  
 */ 
 always @(posedge CLK_60s)  
begin  
  if(!reset) minute_d<=0;
  else if(select_enable&&select==3'd0)
  begin
		minute_d<=num;
  end
  else if(minute_d==9)  
    minute_d<=0;  
  else  
    minute_d<=minute_d+1;  
end  
  
always @(posedge CLK_60s)  
begin  
  if(!reset) minute_g<=5;
  else if(select_enable&&select==3'd1)
  begin
		minute_g<=num;
  end  
  else if(minute_g==9)  
    begin  
      if(minute_g==5)  
        minute_g<=0;  
      else  
        minute_g<=minute_g+1;  
    end  
  end  
assign cout_m=((minute_d==9)&&(minute_g==5))?1:0;
 
 
 
 
 /*
always @(posedge CLK_60s)  
begin  
  if(!reset)  
        minute_d <= 9;  
  else if(select_enable&&select==3'd3)
  begin
		minute_d<=num;
  end
  else if(cout_s)  
    begin  
     if(minute_d==9)  
        minute_d <= 0;  
     else   
        minute_d <=minute_d+1;  
    end  
end  
  
always @(posedge CLK_1Hz)  
begin  
  if(!reset)  
    minute_g <= 5;
  else if(select_enable&&select==3'd4)
  begin
		minute_g<=num;
  end  
  else if(cout_s)  
    begin  
    if(minute_d==9)  
      begin  
      if(minute_g==5)  
        minute_g <= 0;  
      else   
        minute_g<= minute_g+1;  
      end  
    end  
end  
  
assign cout_m = ((minute_d==9)&&(minute_g==5))?1:0;  //进位信号
 */ 
 
always @(posedge CLK_60s)  
begin
  if(!reset)  
        hour_d <= 1;
  else if(select_enable&&select==3'd3)
  begin
		hour_d<=num;
  end
  /*
  else if(change1&&(hour_g>=1)&&(hour_d>=2))
  begin
		hour_d<=hour_d-2;
  end
  
  else if(change3&&(hour_g<=1)&&(hour_d<2))
  begin
		hour_d<=hour_d+2;
  end
  */
  else if(cout_m)  
  begin  
    if((hour_d==3)&&(hour_g==2))  
      hour_d<=0;  
    else  
       if(hour_d==9)  
        hour_d <=0;  
       else  
        hour_d <= hour_d + 1;  
  end
 end  
  
always @(posedge CLK_60s)  
begin  
  if(!reset)  
        hour_g <= 1; 
  //tz
  else if(select_enable&&select==3'd4)
  begin
		hour_g<=num;
  end
  /*
  //24->12
  else if(change1&&(hour_g>=1)&&(hour_d>=2))
  begin
		hour_g<=hour_g-1;
  end
  
  else if(change3&&(hour_g<=1)&&(hour_d<2))
  begin
		hour_g<=hour_g+1;
  end
  */
  else if(cout_m)  
  begin
      if((hour_d==3)&&(hour_g==2))  
        hour_g <= 0;  
      else if(hour_d==9)  
        hour_g<=hour_g+1;  
  end
  end 
 
 /*
always @(posedge CLK_60s)  
begin
  if(!reset)  
        hour_d <= 1;
  else if(select_enable&&select==3'd6)
  begin
		hour_d<=num;
  end
  else if(change1&&(hour_g>=1)&&(hour_d>=2))
  begin
		hour_d<=hour_d-2;
  end
  
  else if(change3&&(hour_g<=1)&&(hour_d<2))
  begin
		hour_d<=hour_d+2;
  end
  
  else if(cout_m&&cout_s&&!change2)  
  begin  
    if((hour_d==3)&&(hour_g==2))  
      hour_d<=0;  
    else  
       if(hour_d==9)  
        hour_d <=0;  
       else  
        hour_d <= hour_d + 1;  
  end
  else if(cout_m&&cout_s&&change2)  
  begin  
    if((hour_d==1)&&(hour_g==1))  
      hour_d<=0;  
    else  
       if(hour_d==9)  
        hour_d <=0;  
       else  
        hour_d <= hour_d + 1;  
  end  
end  
  
always @(posedge CLK_1Hz)  
begin  
  if(!reset)  
        hour_g <= 1; 
  //tz
  else if(select_enable&&select==3'd7)
  begin
		hour_g<=num;
  end
  //24->12
  else if(change1&&(hour_g>=1)&&(hour_d>=2))
  begin
		hour_g<=hour_g-1;
  end
  
  else if(change3&&(hour_g<=1)&&(hour_d<2))
  begin
		hour_g<=hour_g+1;
  end
  
  else if(cout_m&&cout_s&&!change2)  
  begin
      if((hour_d==3)&&(hour_g==2))  
        hour_g <= 0;  
      else if(hour_d==9)  
        hour_g<=hour_g+1;  
  end
  else if(cout_m&&cout_s&&change2)
  begin
      if((hour_d==1)&&(hour_g==1))  
        hour_g <= 0;  
      else if(hour_d==9)  
        hour_g<=hour_g+1;  
  end
end 
*/
endmodule